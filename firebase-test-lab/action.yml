name: 'Firebase Test Lab Testing'
description: 'Create a test on Firebase Test Lab'
inputs:
  arg_groups:
    description: 'Arguments in a YAML-formatted argument file. Separate by ";"'
    required: false
  testapp_dir:
    description: 'Testapps under this dir that will be tested.'
    required: false
  test_type:
    description: 'One of the following test types: xctest, robo, instrumentation, game-loop.'
    required: false
  test_devices:
    description: 'Device model used for testing. Separate by ";"'
    required: false
  timeout:
    description: 'Timeout for one ftl test.'
    default: '600s'
    required: false
  additional_flags:
    description: 'Additional flags and values that may be used. e.g. --xcode-version=11.3'
    required: false
  project_id:
    description: 'Firebase Project ID'
    required: false
outputs:
  test_summary:
    description: "FTL Test summary in JSON formats"
    value: ${{ steps.ftl_test.outputs.test_summary }}
runs:
  using: 'composite'
  steps:
    # Setup GCould Env if account infomation was provided
    - uses: 'google-github-actions/auth@v0'
      if: (env.WORKLOAD_IDENTITY_PROVIDER && env.FIREBASE_SERVICE_ACCOUNT) || env.FIREBASE_SERVICE_ACCOUNT_CREDENTIALS
      with:
        credentials_json: '${{ env.FIREBASE_SERVICE_ACCOUNT_CREDENTIALS }}'
        workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
        service_account: '${{ env.FIREBASE_SERVICE_ACCOUNT }}'
    - uses: google-github-actions/setup-gcloud@v0
      if: (env.WORKLOAD_IDENTITY_PROVIDER && env.FIREBASE_SERVICE_ACCOUNT) || env.FIREBASE_SERVICE_ACCOUNT_CREDENTIALS
      with:
        install_components: 'beta'
    - id: ftl_test
      shell: bash
      run: |
        pip install pyyaml # pyyaml is used to validate the YAML argument file.
        
        test_result=$(python $GITHUB_ACTION_PATH/trigger_ftl_tests.py --arg_groups="${{ inputs.arg_groups }}" --testapp_dir="${{ inputs.testapp_dir }}" --test_type="${{ inputs.test_type }}" --timeout="${{ inputs.timeout }}" --test_devices="${{ inputs.test_devices }}" --additional_flags="${{ inputs.additional_flags }}")
        
        # first character in test_result is the exit code (0 or 1); the rest are the JSON format test summary.
        if [[ ! -z ${test_result} ]]; then
          echo "::set-output name=test_summary::$(echo ${test_result:2})"
          exit $(echo ${test_result:0:1})
        else
          exit 1
        fi
